/*
 *	CameraControl.h
 *
 * 
 *
 *
 *
 */

#pragma once
#include "Typedef.h"
#include "ipcs.h"

class CameraControl
{
//////////////////////////////////////////////////////////////////////////////////////////////////////	
// Construction
//////////////////////////////////////////////////////////////////////////////////////////////////////	
public:
	CameraControl();
	virtual ~CameraControl();

//////////////////////////////////////////////////////////////////////////////////////////////////////	
// Attributes
//////////////////////////////////////////////////////////////////////////////////////////////////////	
public:

private:
	
protected:
	string 			msg;

//////////////////////////////////////////////////////////////////////////////////////////////////////	
// Operations
//////////////////////////////////////////////////////////////////////////////////////////////////////	
public:

//////////////////////////////////////////////////////////////////////////////////////////////////////	
// Implementation
//////////////////////////////////////////////////////////////////////////////////////////////////////	
public:
	//bool 	Init();
	//int		RunGrabbing();

	// Init Ipcs
	int Init();

	// Set Configs
	CameraSdkStatus SetImageResolution(int offsetx, int offsety, int width, int height);
	CameraSdkStatus SetMirrorFlip(BOOL mirror, BOOL flip);
	CameraSdkStatus SetFrameRate(int value);
	CameraSdkStatus SetFrameSpeed(int value);

	CameraSdkStatus SetCameraLightFrequency(int value);

	// Operation
	CameraSdkStatus	GetFrameData(BYTE *pData);
	void PostProcess();
	void CalcGrabberStat();


	int fd_cam_st;
	int ToggleLEDStatus();
	int CtrlGPIO(int fd, int value);
	

private:
	Ipcs	*Sm_Grab;
	Ipcs	*Sm_Res;
	Ipcs	*Mq_Grab;
	Ipcs	*Mq_GrabImg;
	Ipcs	*Sm_Cam;

	struct grab_data{
		int capWidth;
		int capHeight;
	};
	struct message{
		long msg_type;
		struct grab_data data;
	};

	struct cam_param{
		int capWidth;
		int capHeight;

		uint64_t	capCount;
		double		capFPS;

		int64_t		tarClk;
		double		expMax;
		double		expMin;
		double		expCur;
		
		int				dnStatus;
		float			shMax;
		float			shMin;
		float			shCur;
		float			gainMax;
		float			gainMin;
		float			gainCur;
	};

	// for mindvision
	struct cam_param2{
		BOOL			bAeState;
		int				iFrequencySel;

		int				itarAE;
		double		expStep;
	};
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////	
	// IPC : Shared Memory
	//////////////////////////////////////////////////////////////////////////////////////////////////////	
	struct grab_data 	st_grab;
	struct cam_param 	st_cam;
	struct cam_param2	st_cam2;
	//////////////////////////////////////////////////////////////////////////////////////////////////////	

	//////////////////////////////////////////////////////////////////////////////////////////////////////	
	// IPC : Message Queue
	//////////////////////////////////////////////////////////////////////////////////////////////////////	
	struct message msq;
	struct message msq_img;
	//////////////////////////////////////////////////////////////////////////////////////////////////////	


protected:

};

