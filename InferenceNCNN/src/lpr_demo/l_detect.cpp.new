#include "inference_ncnn/l_detect.h"
#include "inference_ncnn/utils.h"

#if __has_include(<format>)
#include <format>
#endif
#include <sstream>
#include <iostream>
#include <fstream>
#include <cstring>

#define TFLITE              0
#define OPENCV_DNN          1
#define NCNN                2
#define USE_FRAMEWORK       NCNN


namespace krlpr {

l_detect::l_detect(std::string param_path, std::string bin_path)
{
    //输出节点数
    numOutput = 2;
    //推理线程数
    numThreads = 1;
    //anchor num
    numAnchor = 3;
    //类别数目
    numCategory = 2;
    //NMS阈值
    nmsThresh = 0;
    //模型输入尺寸大小
    inputWidth = 512;
    inputHeight = 512;
    //模型输入输出节点名称
    inputName = "input.1";
    outputName1 = "703"; //22x22
    outputName2 = "705"; //11x11
    //anchor box w h
    std::vector<float> bias {22.74,11.85, 40.39,46.06, 54.63,24.69, 73.67,51.70, 103.77,32.46, 142.37,68.87};
    anchor.assign(bias.begin(), bias.end());
    ncnn_net.load_param(param_path.c_str());
    ncnn_net.load_model(bin_path.c_str());
}

l_detect::~l_detect()
{
}

float intersection_area(const krlprutils::TargetBox &a, const krlprutils::TargetBox &b)
{
    if (a.x1 > b.x2 || a.x2 < b.x1 || a.y1 > b.y2 || a.y2 < b.y1)
    {
        // no intersection
        return 0.f;
    }

    float inter_width = std::min(a.x2, b.x2) - std::max(a.x1, b.x1);
    float inter_height = std::min(a.y2, b.y2) - std::max(a.y1, b.y1);

    return inter_width * inter_height;
}

bool scoreSort(krlprutils::TargetBox a, krlprutils::TargetBox b) 
{ 
    return (a.score > b.score); 
}

//NMS处理
int l_detect::nmsHandle(std::vector<krlprutils::TargetBox> &tmpBoxes, 
                             std::vector<krlprutils::TargetBox> &dstBoxes)
{
    std::vector<int> picked;
    
    sort(tmpBoxes.begin(), tmpBoxes.end(), scoreSort);

    for (int i = 0; i < tmpBoxes.size(); i++) {
        int keep = 1;
        for (int j = 0; j < picked.size(); j++) {
            //交集
            float inter_area = intersection_area(tmpBoxes[i], tmpBoxes[picked[j]]);
            //并集
            float union_area = tmpBoxes[i].area() + tmpBoxes[picked[j]].area() - inter_area;
            float IoU = inter_area / union_area;

            if(IoU > nmsThresh && tmpBoxes[i].cate == tmpBoxes[picked[j]].cate) {
                keep = 0;
                break;
            }
        }

        if (keep) {
            picked.push_back(i);
        }
    }
    
    for (int i = 0; i < picked.size(); i++) {
        dstBoxes.push_back(tmpBoxes[picked[i]]);
    }

    return 0;
}

//检测类别分数处理
int l_detect::getCategory(const float *values, int index, int &category, float &score)
{
    float tmp = 0;
    float objScore  = values[4 * numAnchor + index];

    for (int i = 0; i < numCategory; i++) {
        float clsScore = values[4 * numAnchor + numAnchor + i];
        clsScore *= objScore;

        if(clsScore > tmp) {
            score = clsScore;
            category = i;

            tmp = clsScore;
        }
    }
    
    return 0;
}

//特征图后处理
int l_detect::predHandle(const ncnn::Mat *out, std::vector<krlprutils::TargetBox> &dstBoxes, 
                              const float scaleW, const float scaleH, const float thresh)
{    //do result
    for (int i = 0; i < numOutput; i++) {   
        int stride;
        int outW, outH, outC;

        outH = out[i].c;
        outW = out[i].h;
        outC = out[i].w;

        assert(inputHeight / outH == inputWidth / outW);
        stride = inputHeight / outH;

        for (int h = 0; h < outH; h++) {
            const float* values = out[i].channel(h);

            for (int w = 0; w < outW; w++) {
                for (int b = 0; b < numAnchor; b++) {                    
                    //float objScore = values[4 * numAnchor + b];
                    krlprutils::TargetBox tmpBox;
                    int category = -1;
                    float score = -1;

                    getCategory(values, b, category, score);

                    if (score > thresh) {
                        float bcx, bcy, bw, bh;

                        bcx = ((values[b * 4 + 0] * 2. - 0.5) + w) * stride;
                        bcy = ((values[b * 4 + 1] * 2. - 0.5) + h) * stride;
                        bw = pow((values[b * 4 + 2] * 2.), 2) * anchor[(i * numAnchor * 2) + b * 2 + 0];
                        bh = pow((values[b * 4 + 3] * 2.), 2) * anchor[(i * numAnchor * 2) + b * 2 + 1];
                        
                        tmpBox.x1 = (bcx - 0.5 * bw) * scaleW;
                        tmpBox.y1 = (bcy - 0.5 * bh) * scaleH;
                        tmpBox.x2 = (bcx + 0.5 * bw) * scaleW;
                        tmpBox.y2 = (bcy + 0.5 * bh) * scaleH;
                        tmpBox.score = score;
                        tmpBox.cate = category;

                        dstBoxes.push_back(tmpBox);
                    }
                }
                values += outC;
            } 
        } 
    }
    return 0;
}

void l_detect::run_inference(cv::Mat& src, std::vector<krlprutils::TargetBox>& res)
{
    #if USE_FRAMEWORK == NCNN
        res.clear();
        float scaleW = (float)src.cols / (float)inputWidth;
        float scaleH = (float)src.rows / (float)inputHeight;
        //resize of input image data
        ncnn::Mat inputImg = ncnn::Mat::from_pixels_resize(src.data, ncnn::Mat::PIXEL_BGR,\
                                                        src.cols, src.rows, inputWidth, inputHeight);
        //Normalization of input image data
        const float mean_vals[3] = {0.f, 0.f, 0.f};
        const float norm_vals[3] = {1/255.f, 1/255.f, 1/255.f};
        inputImg.substract_mean_normalize(mean_vals, norm_vals);
        //creat extractor
        auto ex = ncnn_net.create_extractor();
        ex.set_num_threads(numThreads);

        //set input tensor
        ex.input(inputName, inputImg);

        //forward
        ncnn::Mat out[2]; 
        ex.extract(outputName1, out[0]); //22x22
        ex.extract(outputName2, out[1]); //11x11

        std::vector<krlprutils::TargetBox> tmpBoxes;
        //特征图后处理
        predHandle(out, tmpBoxes, scaleW, scaleH, 0.3);

        //NMS
        nmsHandle(tmpBoxes, res);
        for (size_t i = 0; i < res.size(); ++i)
        {
            // widening
            int offset = res[i].getWidth() * 0.2;
            res[i].x1 = res[i].x1 - offset;
            if (res[i].x1 < 0) {
                res[i].x1 = 0;
            } 
            res[i].x2 = res[i].x2 + offset;
            if (res[i].x2 > src.cols) {
                res[i].x2 = src.cols;
            }
            // heightening
            offset = res[i].getHeight() * 0.2;
            res[i].y1 = res[i].y1 - offset;
            if (res[i].y1 < 0) {
                res[i].y1 = 0;
            } 
            res[i].y2 = res[i].y2 + offset;
            if (res[i].y2 > src.rows) {
                res[i].y2 = src.rows;
            }
            // save lpr result
            cv::Rect rect;
            rect.x = res[i].x1;
            rect.y = res[i].y1;
            rect.width = res[i].getWidth();
            rect.height = res[i].getHeight();
            res[i].lpr_src = cv::Mat(src, rect);
        }
    #endif
}

}   //namespace krlpr