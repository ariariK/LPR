#include "inference_ncnn/l_ocr.h"
#include "inference_ncnn/utils.h"

#include <cstring>

namespace krlpr {

l_ocr::l_ocr(std::string model_path, int input_width, int input_height)
{
    //init data
    verbose = false;
    number_of_threads = 1;
    this->input_width = input_width;
    this->input_height = input_height;
    //Load model
    model = tflite::FlatBufferModel::BuildFromFile(model_path.c_str());
    LPR_CHECK(model != nullptr);
    // Build the interpreter with the InterpreterBuilder.
    // Note: all Interpreters should be built with the InterpreterBuilder,
    // which allocates memory for the Intrepter and does various set up
    // tasks so that the Interpreter can read the provided model.
    tflite::ops::builtin::BuiltinOpResolver resolver;
    tflite::InterpreterBuilder builder(*model, resolver);
    builder(&interpreter);
    LPR_CHECK(interpreter != nullptr);
    // Set number of threads
    interpreter->SetNumThreads(number_of_threads);
    // Allocate tensor buffers.
    LPR_CHECK(interpreter->AllocateTensors() == kTfLiteOk);
    if(verbose) {
        printf("=== Pre-invoke Interpreter State ===\n");
        // tflite::PrintInterpreterState(interpreter.get());
    }
}

l_ocr::~l_ocr()
{
}

int l_ocr::run_inference(std::vector<krlprutils::TargetBox> &boxes, cv::Mat& src)
{
    for(int i = 0; i < boxes.size(); i++) {
        cv::Mat gray;
        cv::cvtColor(boxes[i].lpr_src, gray, cv::COLOR_BGR2GRAY);
        cv::Mat gray_resize;
        cv::resize(gray, gray_resize, cv::Size(this->input_width, this->input_height));
        cv::Mat float_img(32, 96, CV_32FC1);
        int input_index = this->interpreter->inputs()[0];       //signal input fill
        uint8_t *input = this->interpreter->typed_input_tensor<uint8_t>(input_index);
        memcpy(input, gray_resize.ptr<uint8_t>(0), this->input_width*this->input_height);
        // one line or double line
        // input_index = this->interpreter->inputs()[0];
        // bool *is_double;
        // is_double = this->interpreter->typed_input_tensor< bool >(input_index);
        // if(boxes[i].cate) {
        //     *is_double = true;
        // } else {
        //     *is_double = false;
        // }
        // Run inference
        if(verbose) {
            std::cout << "start run inference" << std::endl;
        }
        LPR_CHECK(interpreter->Invoke() == kTfLiteOk);
        if(verbose) {
            printf("\n\n=== Post-invoke Interpreter State ===\n");
            // tflite::PrintInterpreterState(interpreter.get());
        }
        // Read output buffers
        // uint8_t *output = interpreter->typed_output_tensor<uint8_t>(0);
        // for(auto i = 0; i < size; i++) {    //multi outputs
        //     output += 24*68*i;
        //     res.push_back(krlprutils::CTCGready(output));
        // }
        uint8_t *output = interpreter->typed_output_tensor<uint8_t>(0);     //signal output
        boxes[i].lpr_string = krlprutils::CTCGready(output);
        if(krlprutils::LicenseMatch(boxes[i].lpr_string)) {
            cv::rectangle(src, cv::Point(boxes[i].x1, boxes[i].y1), cv::Point(boxes[i].x2, boxes[i].y2), cv::Scalar(0, 0, 255), 3);
            int baseLine;
            cv::Size labelSize = cv::getTextSize(boxes[i].lpr_string, cv::FONT_HERSHEY_SIMPLEX, 0.5, 1, &baseLine);
            int top = std::max(top, labelSize.height);
            cv::putText(src, boxes[i].lpr_string, cv::Point(boxes[i].x1, boxes[i].y1), cv::FONT_HERSHEY_SIMPLEX, 1, cv::Scalar(0, 255, 0), 1);
        } else {
            boxes.erase(boxes.begin() + i);     // delete error lp
        }
    }
}

}   //namespace krlpr